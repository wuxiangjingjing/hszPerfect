1、注解@Transactional 使用
    当注解到某个方法时，是在方法发生未捕获的运行时异常RuntimeException时，会将数据回滚，但是手动将异常抛出时，比如在
    方法上抛出异常 throw Exception ，数据不会发生回滚。处理方法是可以抛出指定异常  runtimeException  (throw Exception)
    或者在注解后面添加@Transactional(rollbackFor = Exception.class)
2、关于mysql语法中的exists 函数的使用总结，相较于in的话效率更高，并且使用更加灵活。
3、mysql的连接驱动在6.0 高版本的时候  需要指定时区
4、使用mysql查询在手写分页时，limit 后面不可以跟算术表达式    例如 limit 1-0,1    正确的是只能有数字
5、策略模式：不同的实现类去实现同个接口，不同的实现类可以有不同的处理逻辑，对于后期的维护比较方便。策略模式的实现也比较简单，主要是配置一个环境类，
    然后赋值相应的接口。在http://c.biancheng.net/view/1378.html有详细介绍  ，本项目中也会有示例代码。
8、 在数据库索引中    当数据量大   但是所加索引的字段值的类型是单一的时候，加索引是基本无效的，当关联表的查询数据量较大时，注意添加索引
10、之前雅座的数据流转方案     接口的实现类中   调用biz   在 biz实现类中书写具体的逻辑，个人认为这样的好处是方便些业务逻辑，实现各种设计模式
11、string的intern 方法   可以节约字符占用的内存 字符的拼接即使 使用的是string   + 在编译的时候也会变成stringbiuder
12、arraylist与linkedList   在使用上的不同，首先都是通过 实现readObject 与 writeObject来实现序列化 ，  arrayList 会预设一个空间大小，默认是10 ，会随着数组长的增大，自动扩展 ，也可以在事先知道数据量的前提下，自己设定合适的长度大小
    arrayList是基于数组实现的，可以指定位置进行增删改，默认增加是增加元素至末尾，且前面顺序不会改变，但是当增加的位置至于最前时，后面的元素都需要做出相应的调整，所以，当数据量较于庞大时，耗时较长
    linkedList是基于双向链表实现的，LinkedList 存储数据的内存地址是不连续的，而是通过指针来定位不连续地址，因此，LinkedList 不支持随机快速访问，LinkedList 也就不能实现 RandomAccess 接口。在高版本中是有前后指针来区分，
    所以  对于插入或删除来说是十分便捷与快速的，对于linkedList的查询使用iteror遍历最为合适。
13、java8接口类 stream 可见测试类Test02,
    Stream 处理数据的方式有两种，串行处理和并行处理。要实现并行处理，我们只需要在例子的代码中新增一个 Parallel() 方法 在使用并行处理时，注意线程安全问题
14、java 提供了Synchronized 和 Lock（jdk 1.5） 线程同步锁 lock 是显式锁，Sync是jvm层隐式锁
15、我们在执行一条 SQL 语句时，要想知道这个 SQL 先后查询了哪些表，是否使用了索引，这些数据从哪里获取到，获取到数据遍历了多少行数据等等，我们可以通过 EXPLAIN 命令来查看这些执行信息。这些执行信息被统称为执行计划。在sql 语句前加上 explain即可
    相关参数信息： partitions：访问的分区表信息
                  type：表示从表中查询到行所执行的方式，查询方式是 SQL 优化中一个很重要的指标，结果值从好到差依次是：system > const > eq_ref > ref > range > index > ALL
16、@Qualifier 注解 可以实现给实现类   直接起别名，目的是将service直接注解至controller,根据service的名称   来进行具体的区别对待
17、hashTable 是基于java 类库提供的哈希表实现的，存储形式都是键值对   不支持null建 与 值 ，且本身是同步的。hashMAP是基于更加广泛的哈希表实现，本身是不同步数据的
    支持null 值与键，TreeMap是基于红黑树的一种顺序访问的map

18、hashTable的同步 与 hasHMap的异步 与相之对应的线程安全问题是在并发情况下需要考虑的东西。
19、stringbuffer中提供了很多关于字符串操作的方法，可以方便快捷的应用
20、批量进行更新操作的时候   注意是否应用了    没有包括在   循环中的参数
21、
